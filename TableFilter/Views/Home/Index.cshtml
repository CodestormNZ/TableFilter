@{
    ViewBag.Title = "Table Filter Demo";
}


<div class="row">
  <div class="col-md-12">
    <div class="modal-header">
      <span class="h3">Data Records</span>
    </div>
    <span class="text-info">Records: <span data-bind="text: countData"></span> of <span data-bind="text: maxData"></span></span>
    <a href="#" class="btn-xs btn-danger pull-right" data-bind="click: getDataFromServer">New Data</a>
    <div>
      <ul class="pagination">
        <li data-bind="css: { disabled: pageIndex() === 0 }"><a href="#" data-bind="click: previousPage">Previous</a></li>
        <!-- ko foreach: pageNumbers -->
        <li data-bind="css: { active: $data.pageNumber === (pageIndex() + 1) }"><a href="#" data-bind="text: $data.pageNumber, click: function() { moveToPage($data.pageNumber-1); }"></a></li>
        <!-- /ko -->
        <li data-bind="css: { disabled: pageIndex() === maxPageIndex() }"><a href="#" data-bind="click: nextPage">Next</a></li>
      </ul>
    </div>
    <table class="table table-striped table-hover">
      <thead>
        <tr>
          <th class="col-md-6"><a href="#" class="btn btn-xs btn-primary" data-bind="click: sortName">Name</a><br /><input data-bind="textInput: filterName" /></th>
          <th class="col-md-3">Active<br /> <span class="btn btn-xs btn-primary" data-bind="click: toggleActive">Filter: <span data-bind="text: filterActive"></span></span></th>
          <th class="col-md-3">Status<br /> <span class="btn btn-xs btn-primary" data-bind="click: toggleStatus">Filter: <span data-bind="text: filterStatus"></span></span></th>
        </tr>
      </thead>
      <tbody data-bind="foreach: pagedData">
        <tr>
          <td data-bind="text: Name"></td>
          <td data-bind="text: Active"></td>
          <td data-bind="text: Status"></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

@section scripts {
  <script>
    var viewModel = function (d) {
      var self = this;
      self.Data = ko.observableArray([]);

      self.pageSize = ko.observable(100);
      self.pageIndex = ko.observable(0);

      self.sort_Name = ko.observable(true);
      self.filterName = ko.observable('');
      self.filterActive = ko.observable('none');
      self.filterStatus = ko.observable('none');
      self.filterStatusMax = 3;
      self.filteredData = ko.pureComputed(function () {
        return ko.utils.arrayFilter(self.Data(), function (item) {
          return (
            (self.filterName().length == 0 || item.Name().toLowerCase().indexOf(self.filterName().toLowerCase()) > -1)
              &&
            (self.filterActive() == 'none' || item.Active() == self.filterActive())
              &&
            (self.filterStatus() == 'none' || item.Status() == self.filterStatus())
          )
        }).sort(
          function (a, b) {
            if (self.sort_Name() === true) {
              var x = a.Name().toLowerCase(), y = b.Name().toLowerCase();
              return x < y ? -1 : x > y ? 1 : 0;
            } else {
              var x = b.Name().toLowerCase(), y = a.Name().toLowerCase();
              return x < y ? -1 : x > y ? 1 : 0;
            }
          });
      });
      self.pagedData = ko.pureComputed(function () {
        var size = self.pageSize();
        var start = self.pageIndex() * size;
        return self.filteredData().slice(start, start + size);
      })
      self.countData = ko.pureComputed(function () {
        return self.filteredData().length;
      });
      self.maxData = ko.pureComputed(function () {
        return self.Data().length;
      });
      self.sortName = function () {
        if (self.sort_Name() == false) {
          self.sort_Name(true);
        } else {
          self.sort_Name(false);
        }
      }
      self.toggleActive = function () {
        if (self.filterActive() == 'none') {
          self.filterActive(true);
        } else if (self.filterActive() == true) {
          self.filterActive(false);
        } else {
          self.filterActive('none');
        }
      }
      self.toggleStatus = function () {
        if (self.filterStatus() == self.filterStatusMax) {
          self.filterStatus('none');
        } else if (self.filterStatus() == 'none') {
          self.filterStatus(0)
        } else {
          self.filterStatus(self.filterStatus() + 1);
        }
      }

      self.maxPageIndex = ko.pureComputed(function () {
        return Math.ceil(self.filteredData().length / self.pageSize()) - 1;
      });
      self.previousPage = function () {
        if (self.pageIndex() > 0) {
          self.pageIndex(self.pageIndex() - 1);
        }
      };
      self.nextPage = function () {
        if (self.pageIndex() < self.maxPageIndex()) {
          self.pageIndex(self.pageIndex() + 1);
        }
      };
      self.pageNumbers = ko.pureComputed(function () {
        var pages = [];
        for (i = 0; i <= self.maxPageIndex() ; i++) {
          pages.push({ pageNumber: (i + 1) });
        }
        return pages;
      });
      self.moveToPage = function (index) {
        self.pageIndex(index);
      };

      //data loader
      self.getDataFromServer = function () {
        $.getJSON("/Home/DataAjaxLoader/", function (d) {
          ko.mapping.fromJS(d, { Data: dataMapping }, self);
        })
      }

      //data mapper
      if (d != null) {
        ko.mapping.fromJS(d, { Data: dataMapping }, self);
      } else {
        getDataFromServer();
      }

    }

    var DataDetail = function (d) {
      var self = this;
      if (d != null) {
        self.Name = ko.observable(d.Name);
        self.Active = ko.observable(d.Active);
        self.Status = ko.observable(d.Status);
      }
    }

    var dataMapping = {
      create: function (options) {
        return new DataDetail(options.data);
      }
    };

    ko.applyBindings(viewModel);
  </script>
}
